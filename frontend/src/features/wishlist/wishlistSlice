import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import api from "../../api/AxiosAPI";

export const fetchWishlist = createAsyncThunk(
    "wishlist/fetchWishlist",
    async (_, thunkAPI) => {
        try {
            const { data } = await api.get("/wishlist");
            return data;
        } catch (error) {
            return thunkAPI.rejectWithValue(error.response?.data?.message || error.message);
        }
    }
);

export const addToWishlist = createAsyncThunk(
    "wishlist/addToWishlist",
    async (productId, thunkAPI) => {
        try {
            const { data } = await api.post("/wishlist", { productId });
            return data;
        } catch (error) {
            return thunkAPI.rejectWithValue(error.response?.data?.message || error.message);
        }
    }
);

export const removeFromWishlist = createAsyncThunk(
    "wishlist/removeFromWishlist",
    async (productId, thunkAPI) => {
        try {
            const { data } = await api.delete(`/wishlist/${productId}`);
            return data;
        } catch (error) {
            return thunkAPI.rejectWithValue(error.response?.data?.message || error.message);
        }
    }
);

const wishlistSlice = createSlice({
    name: "wishlist",
    initialState: {
        items: [],
        loading: false,
        error: null,
    },
    reducers: {
        clearWishlistError: (state) => {
            state.error = null;
        },
        clearWishlistLoading: (state) => {
            state.loading = false;
        }
    },
    extraReducers: (builder) => {
        builder
            // fetch
            .addCase(fetchWishlist.pending, (state) => {
                state.loading = true;
                state.error = null;
            })
            .addCase(fetchWishlist.fulfilled, (state, action) => {
                state.loading = false;
                state.error = null;
                state.items = action.payload;
            })
            .addCase(fetchWishlist.rejected, (state, action) => {
                state.loading = false;
                state.error = action.payload;
            })
            // add
            .addCase(addToWishlist.pending, (state) => {
                state.error = null;
            })
            .addCase(addToWishlist.fulfilled, (state, action) => {
                state.error = null;
                state.items = action.payload;
            })
            .addCase(addToWishlist.rejected, (state, action) => {
                state.error = action.payload;
            })
            // remove
            .addCase(removeFromWishlist.pending, (state) => {
                state.error = null;
            })
            .addCase(removeFromWishlist.fulfilled, (state, action) => {
                state.error = null;
                state.items = action.payload;
            })
            .addCase(removeFromWishlist.rejected, (state, action) => {
                state.error = action.payload;
            });
    },
});

export const { clearWishlistError, clearWishlistLoading } = wishlistSlice.actions;

export default wishlistSlice.reducer;